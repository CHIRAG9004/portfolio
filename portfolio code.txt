import React, { useState } from "react";
// Added Sparkles and Loader2 for the new LLM feature
import { Sun, Moon, Link, Github, Mail, User, Code, FileText, Send, Sparkles, Loader2 } from "lucide-react";

// Portfolio Data: Centralized source of content
const portfolioData = {
  name: "Chirag Tawade",
  tagline: "Electronics & IoT Enthusiast | Embedded Systems Developer | Innovator",
  bio: `I am an embedded systems developer passionate about IoT, automation projects, and research. Experienced with Embedded Systems like ESP32, Raspberry Pi, and Arduino. I have worked on innovative projects such as the Smart Vehicle Impound Management System and Speech Recognition Control Systems.`,
  skills: [
    "ESP32",
    "Raspberry Pi",
    "Python",
    "Arduino",
    "MATLAB",
    "Embedded C",
    "Machine Learning",
  ],
  projects: [
    {
      title: "Smart Vehicle Impound Management System",
      image: "https://placehold.co/400x250/06B6D4/FFFFFF?text=IoT+Impound",
      description:
        "An IoT-based system automating vehicle impoundment with real-time monitoring and control.",
      techStack: "ESP32, MQTT, Python, Raspberry Pi",
      github: "https://github.com/CHIRAG9004/smart-impound-system", // Updated
      demo: "#",
    },
    {
      title: "Bluetooth Home Automation",
      image: "https://placehold.co/400x250/3B82F6/FFFFFF?text=Bluetooth+Home",
      description:
        "Control home appliances wirelessly using a Bluetooth-enabled embedded system.",
      techStack: "Arduino, Bluetooth Module, Android App",
      github: "https://github.com/CHIRAG9004/bt-home-automation", // Updated
      demo: "#",
    },
    {
      title: "Speech Recognition Command System",
      image: "https://placehold.co/400x250/EF4444/FFFFFF?text=Voice+Control",
      description:
        "Voice-controlled embedded system to automate devices via speech commands.",
      techStack: "Raspberry Pi, Python, SpeechRecognition API",
      github: "https://github.com/CHIRAG9004/voice-command-system", // Updated
      demo: "#",
    },
    {
      title: "Heartbeat Sensor with ESP32",
      image: "https://placehold.co/400x250/10B981/FFFFFF?text=Health+Monitor",
      description:
        "ESP32-based heartbeat sensor system for health monitoring applications.",
      techStack: "ESP32, Pulse Sensor, Arduino",
      github: "https://github.com/CHIRAG9004/esp32-heartbeat", // Updated
      demo: "#",
    },
    {
      title: "Aditya-L1 Data Analysis (Halo CME Event Detection)",
      image:
        "https://placehold.co/400x250/F59E0B/FFFFFF?text=Solar+Data+ML",
      description:
        "Analyzed solar data from Aditya-L1 for detection of coronal mass ejections events.",
      techStack: "Python, Data Analysis, Machine Learning",
      github: "https://github.com/CHIRAG9004/aditya-l1-cme-analysis", // Updated
      demo: "#",
    },
  ],
  resumeLink: "#", // Replace with actual resume PDF link
  contactLinks: {
    // UPDATED LINKEDIN URL (cleaned up)
    linkedin: "https://www.linkedin.com/in/chirag-tawade-aaa585290", 
    // UPDATED GITHUB USERNAME
    github: "https://github.com/CHIRAG9004", 
    // UPDATED EMAIL
    email: "mailto:chiragtawade900@gmail.com", 
  },
};

export default function App() {
  const [darkMode, setDarkMode] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    message: "",
  });
  const [formStatus, setFormStatus] = useState("");
  
  // New State for LLM feature
  // Stores generated details with project title as key: { "Project Title": "Generated Text..." }
  const [geminiDetails, setGeminiDetails] = useState({}); 
  // Tracks which project is currently generating
  const [isGenerating, setIsGenerating] = useState(null); 

  const toggleDarkMode = () => setDarkMode(!darkMode);

  const handleInputChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleFormSubmit = (e) => {
    e.preventDefault();
    // Simulate contact form submission
    setFormStatus("Thank you for contacting me! I will get back to you soon.");
    setFormData({ name: "", email: "", message: "" });
    
    // Auto-clear status after 5 seconds
    setTimeout(() => setFormStatus(""), 5000);
  };

  // --- Gemini API Function ---
  const generateProjectDetails = async (projectTitle, description, techStack) => {
    setIsGenerating(projectTitle);
    setGeminiDetails(prev => ({ ...prev, [projectTitle]: null })); // Clear previous response

    const systemPrompt = "You are a senior embedded systems architect. Your task is to take a brief project description and turn it into a high-level, technical summary (150 words max) suitable for a professional portfolio. Focus on the core engineering challenges, key architectural decisions (e.g., why ESP32 over Raspberry Pi), and the real-world impact. Use a confident, technical, and polished tone. Do not use markdown headers.";
    
    const userQuery = `Project Title: ${projectTitle}\nBrief Description: ${description}\nKey Technologies: ${techStack}\n\nGenerate the technical deep dive analysis.`;

    const apiKey = ""; 
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=${apiKey}`;

    const payload = {
        contents: [{ parts: [{ text: userQuery }] }],
        systemInstruction: {
            parts: [{ text: systemPrompt }]
        },
    };

    let attempts = 0;
    const maxAttempts = 3;
    let success = false;
    let text = "Failed to generate detailed analysis after multiple retries. Please check the console for errors.";

    while (attempts < maxAttempts && !success) {
        attempts++;
        try {
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const result = await response.json();
            const candidate = result.candidates?.[0];

            if (candidate && candidate.content?.parts?.[0]?.text) {
                text = candidate.content.parts[0].text;
                success = true;
            } else {
                // If response is OK but content is missing, break the loop
                break; 
            }
        } catch (error) {
            console.error(`Attempt ${attempts} failed:`, error);
            if (attempts < maxAttempts) {
                await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, attempts - 1))); // Exponential backoff
            }
        }
    }

    setGeminiDetails(prev => ({ ...prev, [projectTitle]: text }));
    setIsGenerating(null);
  };
  // --- End Gemini API Function ---

  return (
    <div className={`${darkMode ? "dark" : ""}`}>
      {/* Set Inter font globally for better readability */}
      <style>{`@import url('https://fonts.googleapis.com/css2?family=Inter:wght@100..900&display=swap'); * { font-family: 'Inter', sans-serif; }`}</style>

      <main className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 min-h-screen transition-colors duration-500">
        
        {/* Navbar with Dark/Light toggle */}
        <nav className="sticky top-0 z-50 bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm shadow-md">
          <div className="flex justify-between items-center p-4 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="text-2xl font-extrabold text-blue-600 tracking-wider">
              {portfolioData.name}
            </div>
            
            <div className="flex items-center space-x-4">
              <NavLinks />
              <button
                onClick={toggleDarkMode}
                aria-label="Toggle Dark Mode"
                className="p-2 rounded-full text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700 transition duration-300 shadow-inner"
              >
                {darkMode ? <Sun size={20} /> : <Moon size={20} />}
              </button>
            </div>
          </div>
        </nav>

        {/* Hero Section */}
        <section
          id="home"
          className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 flex flex-col items-center text-center py-20 lg:py-32"
        >
          <img
            src="https://placehold.co/180x180/06B6D4/FFFFFF?text=CT"
            alt={portfolioData.name}
            className="rounded-full w-44 h-44 mb-8 object-cover border-4 border-blue-600 shadow-2xl transition transform hover:scale-105 duration-300"
          />
          <h1 className="text-5xl font-extrabold mb-3 leading-tight">
            Hello, I'm <span className="text-blue-600">{portfolioData.name}</span>
          </h1>
          <p className="text-2xl text-gray-700 dark:text-gray-300 mb-8 font-medium">
            {portfolioData.tagline}
          </p>
          <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-6">
            <a
              href={portfolioData.resumeLink}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center justify-center px-8 py-3 bg-blue-600 text-white font-semibold rounded-xl shadow-lg hover:bg-blue-700 transition transform hover:-translate-y-0.5 duration-300"
            >
              <FileText size={20} className="mr-2" /> View Resume
            </a>
            <a
              href="#contact"
              className="flex items-center justify-center px-8 py-3 border-2 border-blue-600 rounded-xl text-blue-600 font-semibold hover:bg-blue-600 hover:text-white transition transform hover:-translate-y-0.5 duration-300"
            >
              <Mail size={20} className="mr-2" /> Get in Touch
            </a>
          </div>
        </section>

        {/* About Section */}
        <SectionContainer id="about" title="About Me">
          <p className="mb-8 max-w-4xl text-lg leading-relaxed">
            {portfolioData.bio}
          </p>
          <h3 className="text-2xl font-bold mb-5 text-blue-600">
            Key Skills & Tools <Code className="inline-block ml-2" size={24} />
          </h3>
          <div className="flex flex-wrap gap-4 justify-center md:justify-start">
            {portfolioData.skills.map((skill) => (
              <span
                key={skill}
                className="bg-blue-100 dark:bg-blue-800/50 text-blue-800 dark:text-blue-300 px-5 py-2 rounded-full text-md font-semibold shadow-md hover:shadow-lg transition duration-300"
              >
                {skill}
              </span>
            ))}
          </div>
        </SectionContainer>

        {/* Projects Section */}
        <SectionContainer id="projects" title="Showcase Projects">
          <p className="text-center text-lg mb-12 text-gray-700 dark:text-gray-300">
            A selection of my work in Embedded Systems, IoT, and Data Analysis.
          </p>
          <div className="grid gap-10 md:grid-cols-2 xl:grid-cols-3">
            {portfolioData.projects.map((proj) => (
              <ProjectCard 
                key={proj.title} 
                proj={proj} 
                details={geminiDetails[proj.title]}
                isGenerating={isGenerating === proj.title}
                onGenerate={() => generateProjectDetails(proj.title, proj.description, proj.techStack)}
              />
            ))}
          </div>
        </SectionContainer>

        {/* Contact Section */}
        <SectionContainer id="contact" title="Contact Me">
          <p className="text-center text-lg mb-10 text-gray-700 dark:text-gray-300 max-w-2xl mx-auto">
            Ready to collaborate on an innovative embedded or IoT project? Drop me a message below, and let's build something great.
          </p>
          <form
            onSubmit={handleFormSubmit}
            className="max-w-xl mx-auto flex flex-col gap-5 p-8 bg-gray-50 dark:bg-gray-800 rounded-2xl shadow-2xl"
            aria-label="Contact form"
          >
            <input
              type="text"
              name="name"
              value={formData.name}
              onChange={handleInputChange}
              placeholder="Your Name"
              required
              className="px-5 py-3 rounded-xl border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300"
            />
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              placeholder="Your Email"
              required
              className="px-5 py-3 rounded-xl border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300"
            />
            <textarea
              name="message"
              value={formData.message}
              onChange={handleInputChange}
              placeholder="Your Message (Let's talk tech!)"
              required
              rows="6"
              className="px-5 py-3 rounded-xl border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-300"
            />
            <button
              type="submit"
              className="flex items-center justify-center bg-blue-600 text-white font-bold px-6 py-3 rounded-xl shadow-lg hover:bg-blue-700 transition transform hover:-translate-y-0.5 duration-300 disabled:opacity-50"
              disabled={formStatus === "Thank you for contacting me! I will get back to you soon."}
            >
              <Send size={20} className="mr-2" /> Send Message
            </button>
            {formStatus && (
              <p className={`mt-2 text-center text-sm font-semibold ${formStatus.startsWith("Thank you") ? 'text-green-500 dark:text-green-400' : 'text-red-500 dark:text-red-400'}`}>
                {formStatus}
              </p>
            )}
          </form>

          {/* Social Links */}
          <div className="mt-12 flex justify-center space-x-8 text-blue-600 dark:text-blue-400">
            <SocialLink href={portfolioData.contactLinks.linkedin} icon={Link} label="LinkedIn" />
            <SocialLink href={portfolioData.contactLinks.github} icon={Github} label="GitHub" />
            <SocialLink href={portfolioData.contactLinks.email} icon={Mail} label="Email" />
          </div>
        </SectionContainer>

        <footer className="text-center py-8 text-sm text-gray-500 dark:text-gray-400 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900/50">
          <p>&copy; {new Date().getFullYear()} {portfolioData.name}. All rights reserved.</p>
        </footer>
      </main>
    </div>
  );
}

// --- Reusable Components ---

// A simple container for sections to maintain consistent padding and layout
const SectionContainer = ({ id, title, children }) => (
  <section
    id={id}
    className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 border-t border-gray-200 dark:border-gray-700"
  >
    <h2 className="text-4xl font-extrabold mb-12 text-center relative inline-block">
      {title}
      <span className="block w-20 h-1 bg-blue-600 mx-auto mt-2 rounded-full"></span>
    </h2>
    <div className="flex flex-col items-center">{children}</div>
  </section>
);

// Component for a Project Card
// Updated to accept details, isGenerating, and onGenerate props for the LLM feature
const ProjectCard = ({ proj, details, isGenerating, onGenerate }) => {
  const isDemoDisabled = proj.demo === '#';
  const isGithubDisabled = proj.github === '#';
  const [showDetails, setShowDetails] = useState(false);

  // Logic for the LLM button click
  const handleDeepDiveClick = () => {
    if (details) {
      // If we have details, just toggle visibility
      setShowDetails(!showDetails);
    } else {
      // If we don't have details, generate them and then show
      onGenerate();
      setShowDetails(true);
    }
  };


  return (
    <div
      className="bg-gray-100 dark:bg-gray-800 rounded-2xl shadow-xl overflow-hidden transform hover:scale-[1.02] transition duration-500 group"
    >
      <img
        src={proj.image}
        alt={proj.title}
        className="w-full h-52 object-cover border-b-4 border-blue-600/50 group-hover:border-blue-600 transition-colors"
        loading="lazy"
        onError={(e) => {
            e.target.onerror = null; 
            e.target.src = `https://placehold.co/400x250/374151/FFFFFF?text=${encodeURIComponent(proj.title)}`;
        }}
      />
      <div className="p-6 flex flex-col h-full">
        <h3 className="text-2xl font-bold mb-3 text-blue-600">{proj.title}</h3>
        <p className="mb-4 text-gray-700 dark:text-gray-300 flex-grow">
          {proj.description}
        </p>
        <div className="mb-4">
            <span className="text-sm font-semibold bg-gray-200 dark:bg-gray-700 px-3 py-1 rounded-lg text-gray-600 dark:text-gray-400">
                {proj.techStack}
            </span>
        </div>
        
        {/* LLM Feature Button */}
        <button
          onClick={handleDeepDiveClick}
          disabled={isGenerating}
          className={`flex items-center justify-center mt-4 w-full px-4 py-3 rounded-xl text-white font-bold shadow-md transition duration-300 transform hover:-translate-y-0.5 ${
            isGenerating
              ? 'bg-indigo-500/70 cursor-not-allowed'
              : 'bg-indigo-600 hover:bg-indigo-700'
          }`}
        >
          {isGenerating ? (
            <>
              <Loader2 size={18} className="mr-2 animate-spin" /> Analyzing...
            </>
          ) : (
            <>
              <Sparkles size={18} className="mr-2" /> 
              {details ? (showDetails ? 'Hide Deep Dive' : 'Show Deep Dive Analysis') : '✨ Project Deep Dive Analysis'}
            </>
          )}
        </button>

        {/* Generated Deep Dive Content */}
        {details && showDetails && (
          <div className="mt-4 p-4 border-l-4 border-indigo-500 bg-gray-200 dark:bg-gray-700/50 rounded-lg text-sm text-gray-800 dark:text-gray-200 animate-in fade-in duration-500">
            <h4 className="font-bold text-indigo-600 dark:text-indigo-400 mb-2 flex items-center">
              <Code size={16} className="mr-1" /> Technical Deep Dive
            </h4>
            {/* The pre-wrap preserves line breaks from the LLM response */}
            <p className="whitespace-pre-wrap">{details}</p>
          </div>
        )}

        <div className="flex space-x-4 mt-4">
          <a
            href={proj.github}
            target="_blank"
            rel="noopener noreferrer"
            className={`flex items-center text-md font-medium px-4 py-2 rounded-lg transition ${
              isGithubDisabled
                ? 'text-gray-500 bg-gray-300 dark:bg-gray-700 cursor-not-allowed'
                : 'text-white bg-blue-600 hover:bg-blue-700 flex-1 justify-center'
            }`}
            aria-disabled={isGithubDisabled}
            onClick={(e) => isGithubDisabled && e.preventDefault()}
          >
            <Github size={18} className="mr-2" /> GitHub
          </a>
          <a
            href={proj.demo}
            target="_blank"
            rel="noopener noreferrer"
            className={`flex items-center text-md font-medium px-4 py-2 rounded-lg transition ${
              isDemoDisabled
                ? 'text-gray-500 border border-gray-300 dark:border-gray-700 dark:text-gray-400 cursor-not-allowed'
                : 'text-blue-600 border border-blue-600 hover:bg-blue-600 hover:text-white flex-1 justify-center'
            }`}
            aria-disabled={isDemoDisabled}
            onClick={(e) => isDemoDisabled && e.preventDefault()}
          >
            <Link size={18} className="mr-2" /> Demo
          </a>
        </div>
      </div>
    </div>
  );
};

// Component for Social Links in the footer/contact section
const SocialLink = ({ href, icon: Icon, label }) => (
  <a
    href={href}
    target="_blank"
    rel="noopener noreferrer"
    aria-label={label}
    className="flex items-center text-lg font-medium hover:text-blue-800 dark:hover:text-blue-200 transition transform hover:scale-105"
  >
    <Icon size={24} className="mr-2" />
    {label}
  </a>
);

// Component for Nav Links (Optional, enhances separation)
const NavLinks = () => (
    <nav className="hidden md:flex space-x-6">
        <NavLink href="#home" label="Home" icon={User} />
        <NavLink href="#about" label="About" icon={User} />
        <NavLink href="#projects" label="Projects" icon={Code} />
        <NavLink href="#contact" label="Contact" icon={Mail} />
    </nav>
);

// Individual Nav Link
const NavLink = ({ href, label, icon: Icon }) => (
    <a
        href={href}
        className="flex items-center text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 font-medium transition"
    >
        <Icon size={18} className="mr-1" />
        {label}
    </a>
);
